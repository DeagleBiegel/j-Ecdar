class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E7");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L2");
Exit("L2");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E6");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L2");
Exit("L2");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E5");
temp = System.currentTimeMillis();
assert((c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L2");
Exit("L2");
temp = System.currentTimeMillis();
assert((c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E4");
temp = System.currentTimeMillis();
assert((c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E7");
temp = System.currentTimeMillis();
assert((c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L1");
temp = System.currentTimeMillis();
assert((c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E9");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L6");
Exit("L6");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E11");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E7");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L0");
Exit("L1");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=4 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E9");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L6");
Exit("L6");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E11");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
input("E5");
temp = System.currentTimeMillis();
assert((globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L2");
Exit("L2");
temp = System.currentTimeMillis();
assert((globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=4 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E9");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L6");
Exit("L6");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E11");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=4 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E9");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L6");
Exit("L6");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E11");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
input("E4");
temp = System.currentTimeMillis();
assert((globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
input("E7");
temp = System.currentTimeMillis();
assert((globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L0");
Exit("L1");
temp = System.currentTimeMillis();
assert((globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && globalclock>=2 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=4 && c-d<=0 && c-globalclock<=-2 && d-globalclock<=-2));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E14");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L8");
Exit("L8");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L9");
Exit("L9");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E16");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L15");
Exit("L15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E24");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L10");
Exit("L10");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E17");
temp = System.currentTimeMillis();
assert((c>=5 && d>=3 && d<=30 && globalclock>=5 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L12");
Exit("L12");
temp = System.currentTimeMillis();
assert((c>=5 && d>=3 && d<=30 && globalclock>=5 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E19");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>2 && d==0 && globalclock>=5 && d-c<-2 && c-globalclock<=0 && d-globalclock<=-5));
Enter("L11");
Exit("L11");
temp = System.currentTimeMillis();
assert((c>2 && d==0 && globalclock>=5 && d-c<-2 && c-globalclock<=0 && d-globalclock<=-5));
output("E22");
temp = System.currentTimeMillis();
assert((c>2 && d==0 && globalclock>=5 && d-c<-2 && c-globalclock<=0 && d-globalclock<=-5));
Enter("L14");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E14");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L8");
Exit("L8");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L9");
Exit("L9");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E16");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L15");
Exit("L15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E24");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L10");
Exit("L10");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E18");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L11");
Exit("L11");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E22");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L14");
Exit("L14");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E23");
temp = System.currentTimeMillis();
assert((c>=2 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L0");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E14");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L8");
Exit("L8");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L9");
Exit("L9");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E16");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L15");
Exit("L15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E24");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L10");
Exit("L10");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E17");
temp = System.currentTimeMillis();
assert((c>=5 && d>=3 && d<=30 && globalclock>=5 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L12");
Exit("L12");
temp = System.currentTimeMillis();
assert((c>=5 && d>=3 && d<=30 && globalclock>=5 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E20");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && d<=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L13");
Exit("L13");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && d<=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E21");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L7");
Exit("L7");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E13");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L0");
Exit("L1");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && d>=30 && globalclock>=32 && c-d<=-30 && c-globalclock<=-32 && d-globalclock<=-2));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && d>=30 && globalclock>=32 && c-d<=-30 && c-globalclock<=-32 && d-globalclock<=-2));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=32 && globalclock>=34 && c-d<=-30 && c-globalclock<=-32 && d-globalclock<=-2));
Enter("L4");

end of test code

class Clock {
 double now;
 Clock(double now) {
 this.now = now;
}
 double value(double now) {
    return this.now - now;
 }
}
double timeStamp = System.currentTimeMillis();
Clock c = new Clock(timeStamp);
Clock d = new Clock(timeStamp);
Clock globalclock = new Clock(timeStamp);
double temp = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L0");
Exit("L0");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L1");
Exit("L1");
temp = System.currentTimeMillis();
assert((d-c<=0 && globalclock-c<=0 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E3");
c.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L3");
Exit("L3");
temp = System.currentTimeMillis();
assert((c<=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
output("E8");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
Enter("L4");
Exit("L4");
temp = System.currentTimeMillis();
assert((c>=2 && d>=2 && globalclock>=2 && c-d<=0 && globalclock-d<=0 && c-globalclock<=0 && d-globalclock<=0));
input("E14");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L8");
Exit("L8");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L9");
Exit("L9");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E16");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L15");
Exit("L15");
temp = System.currentTimeMillis();
assert((c>=2 && d==0 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E24");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L10");
Exit("L10");
temp = System.currentTimeMillis();
assert((c>=2 && d<=3 && globalclock>=2 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E17");
temp = System.currentTimeMillis();
assert((c>=5 && d>=3 && d<=30 && globalclock>=5 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L12");
Exit("L12");
temp = System.currentTimeMillis();
assert((c>=5 && d>=3 && d<=30 && globalclock>=5 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E20");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && d<=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L13");
Exit("L13");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && d<=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
output("E21");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
Enter("L7");
Exit("L7");
temp = System.currentTimeMillis();
assert((c>=32 && d>=30 && globalclock>=32 && d-c<=-2 && c-globalclock<=0 && d-globalclock<=-2));
input("E12");
d.time = System.currentTimeMillis();
temp = System.currentTimeMillis();
assert((c>2 && d==0 && globalclock>=32 && d-c<-2 && c-globalclock<=0 && d-globalclock<=-32));
Enter("L5");
Exit("L5");
temp = System.currentTimeMillis();
assert((c>2 && d==0 && globalclock>=32 && d-c<-2 && c-globalclock<=0 && d-globalclock<=-32));
output("E10");
temp = System.currentTimeMillis();
assert((c>2 && globalclock>=32 && d-c<-2 && c-globalclock<=0 && d-globalclock<=-32));
Enter("L4");

end of test code

